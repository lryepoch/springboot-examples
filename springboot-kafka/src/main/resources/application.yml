server:
  servlet:
    context-path: /
  port: 8080

#运行本地kafka服务，详情请查看：http://www.imooc.com/article/262427
spring:
  kafka:
    bootstrap-servers: 127.0.0.1:9092     # 指定kafka 代理地址，可以多个
    #生产者的配置，大部分我们可以使用默认的，这里列出几个比较重要的属性
    producer:
      batch-size: 16              #每批次发送消息的数量
      retries: 0                  #设置大于0的值将使客户端重新发送任何数据，一旦这些数据发送失败。注意，这些重试与客户端接收到发送错误时的重试没有什么不同。允许重试将潜在的改变数据的顺序，如果这两个消息记录都是发送到同一个partition，则第一个消息失败第二个发送成功，则第二条消息会比第一条消息出现要早。
      buffer-memory: 33554432     #producer可以用来缓存数据的内存大小。如果数据产生速度大于向broker发送的速度，producer会阻塞或者抛出异常，以“block.on.buffer.full”来表明。这项设置将和producer能够使用的总内存相关，但并不是一个硬性的限制，因为不是producer使用的所有内存都是用于缓存。一些额外的内存会用于压缩（如果引入压缩机制），同样还有一些用于维护请求。
      key-serializer: org.apache.kafka.common.serialization.StringSerializer      #key序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    #消费者的配置
    consumer:
      group-id: test-consumer-group     # 指定默认消费者group id
      auto-offset-reset: latest         #Kafka中没有初始偏移或如果当前偏移在服务器上不再存在时,默认区最新 ，有三个选项 【latest, earliest, none】
      enable-auto-commit: true          #是否开启自动提交
      auto-commit-interval: 100         #自动提交的时间间隔
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer          #消息key的解码方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer        #消息体的解码方式


